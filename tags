!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	/7918d19f/
STRING_H	StaticString.h	/^#define STRING_H$/;"	d
STRING_H	String.h	/^#define STRING_H$/;"	d
String	StaticString.h	/^class String{$/;"	c
String	String.cpp	/^String::String() { m_str = ""; }$/;"	f	class:String
String	String.cpp	/^String::String(const char* cm_str) {$/;"	f	class:String
String	String.cpp	/^String::String(std::string str) {$/;"	f	class:String
String	String.h	/^class String {$/;"	c
compare	StaticString.cpp	/^bool String::compare(const std::string &str1, const std::string str2) {$/;"	f	class:String	typeref:typename:bool
compare	String.cpp	/^bool String::compare(const std::string &str) {$/;"	f	class:String	typeref:typename:bool
concat	StaticString.cpp	/^std::string String::concat(const std::string &str1, const std::string &str2) {$/;"	f	class:String	typeref:typename:std::string
concat	String.cpp	/^std::string String::concat(const std::string &str) {$/;"	f	class:String	typeref:typename:std::string
copyTo	StaticString.cpp	/^void String::copyTo(const std::string &from, std::string &to){$/;"	f	class:String	typeref:typename:void
copyTo	String.cpp	/^void String::copyTo(std::string &to){$/;"	f	class:String	typeref:typename:void
count	StaticString.cpp	/^int String::count(const std::string &str, std::string searchStr) {$/;"	f	class:String	typeref:typename:int
count	String.cpp	/^int String::count(const std::string searchStr) {$/;"	f	class:String	typeref:typename:int
equals	StaticString.cpp	/^bool String::equals(const std::string &str1, const std::string &str2) {$/;"	f	class:String	typeref:typename:bool
equals	String.cpp	/^bool String::equals(const std::string &str) {$/;"	f	class:String	typeref:typename:bool
erase	StaticString.cpp	/^std::string String::erase(std::string &str, std::string erasestr){$/;"	f	class:String	typeref:typename:std::string
erase	String.cpp	/^std::string String::erase(const std::string erasestr){$/;"	f	class:String	typeref:typename:std::string
eraseFirst	StaticString.cpp	/^std::string String::eraseFirst(std::string &str, std::string erasestr){$/;"	f	class:String	typeref:typename:std::string
eraseFirst	String.cpp	/^std::string String::eraseFirst(const std::string erasestr){$/;"	f	class:String	typeref:typename:std::string
eraseHead	StaticString.cpp	/^std::string String::eraseHead(std::string &str, int headsize){$/;"	f	class:String	typeref:typename:std::string
eraseHead	String.cpp	/^std::string String::eraseHead(const int headsize){$/;"	f	class:String	typeref:typename:std::string
eraseLast	StaticString.cpp	/^std::string String::eraseLast(std::string &str, std::string erasestr){$/;"	f	class:String	typeref:typename:std::string
eraseLast	String.cpp	/^std::string String::eraseLast(std::string erasestr){$/;"	f	class:String	typeref:typename:std::string
eraseTail	StaticString.cpp	/^std::string String::eraseTail(std::string &str, int tailsize){$/;"	f	class:String	typeref:typename:std::string
eraseTail	String.cpp	/^std::string String::eraseTail(const int tailsize){$/;"	f	class:String	typeref:typename:std::string
fillLeft	StaticString.cpp	/^std::string String::fillLeft(std::string &str, int length, char fill){$/;"	f	class:String	typeref:typename:std::string
fillLeft	String.cpp	/^std::string String::fillLeft(const int length, const char fill){$/;"	f	class:String	typeref:typename:std::string
fillRight	StaticString.cpp	/^std::string String::fillRight(std::string &str, int length, char fill){$/;"	f	class:String	typeref:typename:std::string
fillRight	String.cpp	/^std::string String::fillRight(const int length, const char fill){$/;"	f	class:String	typeref:typename:std::string
find	StaticString.cpp	/^std::vector<int> String::find(const std::string &str, std::string search){$/;"	f	class:String	typeref:typename:std::vector<int>
find	String.cpp	/^std::vector<int> String::find(const std::string search){$/;"	f	class:String	typeref:typename:std::vector<int>
findAll	StaticString.cpp	/^inline std::vector<int> String::findAll(std::string &str, std::string search){$/;"	f	class:String	typeref:typename:std::vector<int>
findAll	String.cpp	/^inline std::vector<int> String::findAll(const std::string search){$/;"	f	class:String	typeref:typename:std::vector<int>
findFirst	StaticString.cpp	/^int String::findFirst(std::string &str ,std::string find){$/;"	f	class:String	typeref:typename:int
findFirst	String.cpp	/^int String::findFirst(std::string find){$/;"	f	class:String	typeref:typename:int
findLast	StaticString.cpp	/^int String::findLast(std::string &str, std::string find){$/;"	f	class:String	typeref:typename:int
findLast	String.cpp	/^int String::findLast(const std::string find){$/;"	f	class:String	typeref:typename:int
format	StaticString.cpp	/^std::string String::format(std::string formatText, std::string &str){$/;"	f	class:String	typeref:typename:std::string
format	StaticString.cpp	/^std::string String::format(std::string formatText, std::string &str1, std::string &str2){$/;"	f	class:String	typeref:typename:std::string
format	StaticString.cpp	/^std::string String::format(std::string formatText, std::string &str1, std::string &str2, std::st/;"	f	class:String	typeref:typename:std::string
format	StaticString.cpp	/^std::string String::format(std::string formatText, std::vector<std::string> &strArr) {$/;"	f	class:String	typeref:typename:std::string
indexOf	StaticString.cpp	/^inline int indexOf(std::string &str, std::string find){$/;"	f	typeref:typename:int
indexOf	String.cpp	/^inline int String::indexOf(const std::string find){$/;"	f	class:String	typeref:typename:int
isEmpty	StaticString.cpp	/^bool String::isEmpty(const std::string &str) {$/;"	f	class:String	typeref:typename:bool
isEmpty	String.cpp	/^bool String::isEmpty() {$/;"	f	class:String	typeref:typename:bool
isEmptyOrWhiteSpace	StaticString.cpp	/^bool String::isEmptyOrWhiteSpace(const std::string &str) {$/;"	f	class:String	typeref:typename:bool
isEmptyOrWhiteSpace	String.cpp	/^bool String::isEmptyOrWhiteSpace() {$/;"	f	class:String	typeref:typename:bool
lastIndexOf	StaticString.cpp	/^inline int String::lastIndexOf(std::string &str, std::string find){$/;"	f	class:String	typeref:typename:int
lastIndexOf	String.cpp	/^inline int String::lastIndexOf(const std::string find){$/;"	f	class:String	typeref:typename:int
m_str	String.h	/^        std::string m_str;$/;"	m	class:String	typeref:typename:std::string
normPathUnix	StaticString.cpp	/^std::string String::normPathUnix(std::string &str){$/;"	f	class:String	typeref:typename:std::string
normPathUnix	String.cpp	/^std::string String::normPathUnix(){$/;"	f	class:String	typeref:typename:std::string
normPathWindows	StaticString.cpp	/^std::string String::normPathWindows(std::string &str){$/;"	f	class:String	typeref:typename:std::string
normPathWindows	String.cpp	/^std::string String::normPathWindows(){$/;"	f	class:String	typeref:typename:std::string
operator !=	String.cpp	/^bool String::operator!= (const String& S) {$/;"	f	class:String	typeref:typename:bool
operator !=	String.cpp	/^bool String::operator!= (const char* c) {$/;"	f	class:String	typeref:typename:bool
operator !=	String.cpp	/^bool String::operator!= (const std::string str) {$/;"	f	class:String	typeref:typename:bool
operator +	String.cpp	/^String operator+ (String lhs, const String& rhs) {$/;"	f	typeref:typename:String
operator +	String.cpp	/^String operator+ (String lhs, const char rhs) {$/;"	f	typeref:typename:String
operator +	String.cpp	/^String operator+ (String lhs, const char* rhs) {$/;"	f	typeref:typename:String
operator +	String.cpp	/^String operator+ (String lhs, const std::string& rhs) {$/;"	f	typeref:typename:String
operator +=	String.cpp	/^String& String::operator+= (const String &S) {$/;"	f	class:String	typeref:typename:String &
operator +=	String.cpp	/^String& String::operator+= (const char c) {$/;"	f	class:String	typeref:typename:String &
operator +=	String.cpp	/^String& String::operator+= (const char* c) {$/;"	f	class:String	typeref:typename:String &
operator +=	String.cpp	/^String& String::operator+= (const std::string str) {$/;"	f	class:String	typeref:typename:String &
operator <<	String.cpp	/^std::ostream& operator<< (std::ostream &out, const String &S) {$/;"	f	typeref:typename:std::ostream &
operator =	String.cpp	/^String String::operator= (String &s) {$/;"	f	class:String	typeref:typename:String
operator =	String.cpp	/^void String::operator= (const char* c) {$/;"	f	class:String	typeref:typename:void
operator =	String.cpp	/^void String::operator= (std::string str) {$/;"	f	class:String	typeref:typename:void
operator ==	String.cpp	/^bool String::operator== (const String &s) {$/;"	f	class:String	typeref:typename:bool
operator ==	String.cpp	/^bool String::operator== (const char* c) {$/;"	f	class:String	typeref:typename:bool
operator ==	String.cpp	/^bool String::operator== (const std::string &str) {$/;"	f	class:String	typeref:typename:bool
operator >>	String.cpp	/^std::istream& operator>> (std::istream &is, String &S) {$/;"	f	typeref:typename:std::istream &
operator [] 	String.cpp	/^char& String::operator[] (int pos) {$/;"	f	class:String	typeref:typename:char &
padLeft	StaticString.cpp	/^inline std::string String::padLeft(std::string &str, int length, char fill){$/;"	f	class:String	typeref:typename:std::string
padLeft	String.cpp	/^inline std::string String::padLeft(const int length, const char fill){$/;"	f	class:String	typeref:typename:std::string
padRight	StaticString.cpp	/^inline std::string String::padRight(std::string &str, int length, char fill){$/;"	f	class:String	typeref:typename:std::string
padRight	String.cpp	/^inline std::string String::padRight(int length, char fill){$/;"	f	class:String	typeref:typename:std::string
replace	StaticString.cpp	/^std::string String::replace(std::string &str, std::string oldstr, std::string newstr){$/;"	f	class:String	typeref:typename:std::string
replace	String.cpp	/^std::string String::replace(const std::string oldstr, const std::string newstr){$/;"	f	class:String	typeref:typename:std::string
replaceFirst	StaticString.cpp	/^std::string String::replaceFirst(std::string &str, std::string oldstr, std::string newstr){$/;"	f	class:String	typeref:typename:std::string
replaceFirst	String.cpp	/^std::string String::replaceFirst(const std::string oldstr, const std::string newstr){$/;"	f	class:String	typeref:typename:std::string
replaceHead	StaticString.cpp	/^std::string String::replaceHead(std::string &str, int headsize, std::string newstr){$/;"	f	class:String	typeref:typename:std::string
replaceHead	String.cpp	/^std::string String::replaceHead(int headsize, const std::string newstr){$/;"	f	class:String	typeref:typename:std::string
replaceLast	StaticString.cpp	/^std::string String::replaceLast(std::string &str, std::string oldstr, std::string newstr){$/;"	f	class:String	typeref:typename:std::string
replaceLast	String.cpp	/^std::string String::replaceLast(const std::string oldstr, const std::string newstr){$/;"	f	class:String	typeref:typename:std::string
replaceTail	StaticString.cpp	/^std::string String::replaceTail(std::string &str, int tailsize, std::string newstr){$/;"	f	class:String	typeref:typename:std::string
replaceTail	String.cpp	/^std::string String::replaceTail(int tailsize, const std::string newstr){$/;"	f	class:String	typeref:typename:std::string
split	StaticString.cpp	/^std::vector<std::string> String::split (std::string str, const std::string delimiter){$/;"	f	class:String	typeref:typename:std::vector<std::string>
split	String.cpp	/^std::vector<std::string> String::split(const std::string delimiter){$/;"	f	class:String	typeref:typename:std::vector<std::string>
swap	StaticString.cpp	/^void String::swap(std::string &str1, std::string &str2) {$/;"	f	class:String	typeref:typename:void
swap	String.cpp	/^void String::swap(std::string &str2) {$/;"	f	class:String	typeref:typename:void
toCStr	String.cpp	/^const char* String::toCStr() {$/;"	f	class:String	typeref:typename:const char *
toCharArr	StaticString.cpp	/^std::vector<char> String::toCharArr(std::string &str){$/;"	f	class:String	typeref:typename:std::vector<char>
toCharArr	String.cpp	/^std::vector<char> String::toCharArr() {$/;"	f	class:String	typeref:typename:std::vector<char>
toLower	StaticString.cpp	/^std::string String::toLower(std::string str){$/;"	f	class:String	typeref:typename:std::string
toLower	String.cpp	/^std::string String::toLower(){$/;"	f	class:String	typeref:typename:std::string
toStdStr	String.cpp	/^std::string String::toStdStr() {$/;"	f	class:String	typeref:typename:std::string
toUpper	StaticString.cpp	/^std::string String::toUpper(std::string str){$/;"	f	class:String	typeref:typename:std::string
toUpper	String.cpp	/^std::string String::toUpper(){$/;"	f	class:String	typeref:typename:std::string
trim	StaticString.cpp	/^std::string String::trim(std::string &str){$/;"	f	class:String	typeref:typename:std::string
trim	String.cpp	/^std::string String::trim() {$/;"	f	class:String	typeref:typename:std::string
trimLeft	StaticString.cpp	/^std::string String::trimLeft(std::string &str){$/;"	f	class:String	typeref:typename:std::string
trimLeft	String.cpp	/^std::string String::trimLeft(){$/;"	f	class:String	typeref:typename:std::string
trimRight	StaticString.cpp	/^std::string String::trimRight(std::string &str){$/;"	f	class:String	typeref:typename:std::string
trimRight	String.cpp	/^std::string String::trimRight(){$/;"	f	class:String	typeref:typename:std::string
